<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置</description>

	<!---cookie -->
	<!-- uid(session id) 生成策略 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="${shiro.uid.cookie.name}" />
		<property name="httpOnly" value="${shiro.uid.cookie.httpOnly}" />
		<property name="maxAge" value="${shiro.uid.cookie.maxAge}" />
	</bean>

	<!--记住我 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}" />
		<!-- 30天 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!--dao -->
	<!-- 使用ehcache来保存会话的DAO -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
		<property name="activeSessionsCacheName" value="${shiro.active.session.cacheName}" />
	</bean>
	<!-- 使用redis来保存会话的DAO
	<bean id="sessionDAO" class="com.infosky.shiro.session.dao.RedisSessionDAO">
		<property name="keyPrefix" value="${shiro.active.session.cacheName}" />
		<property name="filterUrl" value="/static/" />
		<property name="expire" value="1800" />
	</bean>
 	-->
	<!-- 会话验证调度器 其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期；默认就是使用该类. 
	定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作,用户直接关闭浏览器造成的孤立会话.
	<bean id="sessionValidationScheduler" class="com.infosky.shiro.session.scheduler.MyExecutorServiceSessionValidationScheduler">
		<property name="interval" value="${shiro.session.validation.interval}" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	-->
	<!-- 使用Quartz会话验证调度器-->
	<bean id="sessionValidationScheduler" class="com.infosky.shiro.quartz.Quartz2SessionValidationScheduler">
		<property name="sessionValidationInterval" value="${shiro.session.validation.interval}" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"></property>
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml" />
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="retryLimitHashedCredentialsMatcher" class="com.infosky.sys.service.security.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="shiroEhcacheManager" />
		<property name="hashAlgorithmName" value="SHA-1" />  			<!-- 指定散列算法为SHA-1，需要和生成密码时的一样； -->
		<property name="hashIterations" value="1024" />  						<!-- 散列迭代次数，需要和生成密码时的一样 -->
		<property name="storedCredentialsHexEncoded" value="true" />   <!-- 表示是否存储散列后的密码为16进制，需要和生成密码时的一样，默认是base64； -->
	</bean>

	<!-- Realm实现 -->
	<bean id="systemAuthorizingRealm" class="com.infosky.sys.service.security.SystemAuthorizingRealm">
		<property name="cacheManager" ref="shiroEhcacheManager" />
		<property name="credentialsMatcher" ref="retryLimitHashedCredentialsMatcher" />
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="false" />
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>

	<!-- 安全管理器 securityManager是shiro的核心，初始化时协调各个模块运行 -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="systemAuthorizingRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- 重写shiro表单拦截器以及 改造记住我流程 -->
	<bean id="formAuthenticationFilter" class="com.infosky.sys.service.security.UserFormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="loginUrl" value="/login" />
		<property name="rememberMeParam" value="rememberMe" />
	</bean>

	<!-- 显试的重写shiro的ssl拦截器 自定义端口 -->
	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
		<property name="port" value="8443" />
	</bean>

	<!-- 自定义过滤器，实现自动踢人的功能 -->
	<bean id="kickoutSessionControlFilter" class="com.infosky.sys.service.security.KickoutSessionControlFilter">
		<property name="cacheManager" ref="shiroEhcacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="kickoutAfter" value="false" /> <!-- true:踢出后面登陆的，false，踢出前面登陆的 -->
		<property name="maxSession" value="10" /> <!-- 容许几个人同时登陆 -->
		<property name="kickoutUrl" value="/login" />   <!-- 被踢出去后跳转到哪个页面 -->
	</bean>

	<!--shiro过滤器配置，bean的id值须与web中的filter-name的值相同 -->
	<bean id="shiroFilter" class="com.infosky.shiro.spring.MyShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- 没有权限或者失败后跳转的页面 -->
		<property name="loginUrl" value="${shiro.login.url}" />
		<!-- 登录成功后要跳转的连接 -->
		<property name="successUrl" value="${shiro.default.success.url}" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
				<entry key="ssl" value-ref="sslFilter" />
				<entry key="kickout" value-ref="kickoutSessionControlFilter" />
			</util:map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做, -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				/user/** = authc,kickout
			</value>
		</property>
	</bean>

	<!-- 权限资源配置 重写过滤器配置 为了动态修改资源权限不需要重启项目 
	<bean id="filterChainDefinitionsService" class="com.infosky.sys.service.security.SimpleFilterChainDefinitionsService" lazy-init="false">
		<property name="definitions">
			<value> 
			/static/** = anon 
			/assets/** = anon 
			/css/** =anon 
			/js/** =anon 
			/logout = anon 
			/upload/** = anon
			/demo/**=anon 
			/unauthorized=anon 
			/druid/**=anon 
			/table/list=authc,roles[朱启亮角色] 
			/login** = authc ,ssl 
			/login/** = authc ,ssl 
			/index** = user 
			/index/** = user 
			/user/** = authc 
			/role/** = authc 
			/resource/** = authc 
			/** = authc,perms 
			</value>
		</property>
	</bean>
	-->
	<!-- Shiro生命周期处理器 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 支持 Shiro对Controller的方法级AOP安全控制 begin -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 支持 Shiro对Controller的方法级AOP安全控制 end -->
</beans>